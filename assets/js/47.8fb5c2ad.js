(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{781:function(t,r,s){"use strict";s.r(r);var a=s(11),o=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("本讲以"),s("code",[t._v("update T set c = c + 1 where id = 2")]),t._v("为例，并且 id = 2 的这一行的 c 原来的值为 0")])]),t._v(" "),s("h2",{attrs:{id:"redolog-重做日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redolog-重做日志"}},[t._v("#")]),t._v(" redolog（重做日志）")]),t._v(" "),s("p",[s("code",[t._v("WAL(Write-Ahead Logging)")]),t._v("技术：先写日志，再写磁盘\n"),s("strong",[t._v("每次更新都写入磁盘的弊端")]),t._v("：如果每次更新都写入磁盘，那么需要先到磁盘找到相应的记录，将记录更新，整个过程的 IO 成本、查找成本都很高\n"),s("strong",[t._v("使用 redolog 后")]),t._v("：当有一条记录需要更新时，先将更新操作记录到 redolog 中，并且更新内存，等到适当的时候（通常是系统空闲的时候）再写入磁盘\nredolog 是 InnoDB 特有的，属于存储引擎层。InnoDB 的 redolog 是固定大小的，例如可以配置 4 个文件，每个文件 1GB，那么 redolog 就可以记录 4GB 的操作，从头开始写，写到末尾之后再回到开头继续循环写")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  ib_logfile_0  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  ib_logfile_1  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  ib_logfile_2  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  ib_logfile_3  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\t\t\n\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\n\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n\t\t\t\tcheckpoint\t\t\t  write position\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("write position")]),t._v("：当前记录的位置，一边写一边往后移，写完 3 号文件再回到 0 号文件开头写")]),t._v(" "),s("li",[s("code",[t._v("checkpoint")]),t._v("：当前要擦除的地方，也是循环移动")]),t._v(" "),s("li",[s("code",[t._v("write position")]),t._v("和"),s("code",[t._v("checkpoint")]),t._v("之间的位置是文件中还空着的部分，当"),s("code",[t._v("write position")]),t._v("追上"),s("code",[t._v("checkpoint")]),t._v("时，redolog 就满了，不能再写了（不能再更新了），需要停下来先擦掉一些记录（把记录写入磁盘中），把"),s("code",[t._v("checkpoint")]),t._v("往前推进一些")])]),t._v(" "),s("p",[s("strong",[t._v("重点")]),t._v("：redolog 拥有"),s("code",[t._v("crash-safe")]),t._v("能力，即使 MySQL 发生异常重启，之前提交的记录都不会丢失，可以保证数据一致性")]),t._v(" "),s("h2",{attrs:{id:"binlog-归档日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binlog-归档日志"}},[t._v("#")]),t._v(" binlog（归档日志）")]),t._v(" "),s("p",[t._v("binlog 是 Server 层实现的日志，所有的引擎都可以使用，但是 binlog 日志只能用于归档，并没有"),s("code",[t._v("crash-safe")]),t._v("能力，这也是为什么 InnoDB 需要使用 redolog 的原因")]),t._v(" "),s("h3",{attrs:{id:"binlog-日志与-redolog-日志的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binlog-日志与-redolog-日志的区别"}},[t._v("#")]),t._v(" binlog 日志与 redolog 日志的区别")]),t._v(" "),s("ol",[s("li",[t._v("binlog 是 Server 层日志，redolog 是 InnoDB 引擎特有的日志")]),t._v(" "),s("li",[t._v("binlog 是逻辑日志，记录语句的原始逻辑，例如“给 id = 2 这一行的 c 字段 + 1”；redolog 是物理日志，记录的是更新操作，例如“在某个数据页上做了什么修改”")]),t._v(" "),s("li",[t._v("binlog 是追加写入的，也就是当前文件写到一定大小后会切换到下一个，不会覆盖之前的日志；redolog 是循环写的，空间大小是固定的，会被写满")])]),t._v(" "),s("h2",{attrs:{id:"更新语句执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新语句执行流程"}},[t._v("#")]),t._v(" 更新语句执行流程")]),t._v(" "),s("ol",[s("li",[t._v("执行器调用引擎接口取 id = 2 这一行。id 是主键，引擎可以直接通过索引树搜索到这一行。如果这一行所在的数据页在内存中，那么可以直接返回给执行器，如果不在，那么就需要从磁盘中读入内存，再返回给执行器")]),t._v(" "),s("li",[t._v("执行器拿到这一行后，将 c 字段加 1，并调用引擎接口写入这行新数据")]),t._v(" "),s("li",[t._v("引擎将这行新数据更新到内存中，并将更新操作记录到 redolog 中，此时 redolog 处于 prepare 状态。然后引擎告诉执行器随时可以提交事务了")]),t._v(" "),s("li",[t._v("执行器生成这个更新操作的 binlog，并将 binlog 写入磁盘")]),t._v(" "),s("li",[t._v("执行器调用引擎接口提交事务，引擎将刚写入 redolog 的状态改成 commit，更新操作完成")])]),t._v(" "),s("h2",{attrs:{id:"两阶段提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[t._v("#")]),t._v(" 两阶段提交")]),t._v(" "),s("p",[s("strong",[t._v("两阶段提交")]),t._v("：在上述更新过程的执行中，redolog 的写入拆成了两步，先为 prepare 状态，后为 commit 状态\n"),s("strong",[t._v("数据恢复过程")]),t._v("：通过找到最近的全量备份，将备份恢复到临时库中，然后从备份的时间点开始，将备份的 binlog 取出来，重放到需要恢复的时间点，这样子临时库就会和需要的一致了。最后再按需要将临时库的表数据取出来，恢复到线上库去\n"),s("strong",[t._v("“一天一备”和“一周一备”的优缺点")]),t._v("：“一天一备”的恢复目标时间"),s("code",[t._v("RTO")]),t._v("更短，但需要消耗更多的存储空间。“一周一备”则相反")]),t._v(" "),s("h3",{attrs:{id:"为什么需要-两阶段提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-两阶段提交"}},[t._v("#")]),t._v(" 为什么需要“两阶段提交”？")]),t._v(" "),s("p",[t._v("采取反证法，如果不使用两阶段提交，那么 redolog 和 binlog 作为两个独立的逻辑，写入的情况有以下两种：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("先写 redolog，再写 binlog")]),t._v(" "),s("ol",[s("li",[t._v("redolog 写好后，在写 binlog 的时候 MySQL 异常重启，由于 redolog 具有"),s("code",[t._v("crash-safe")]),t._v("能力，可以将数据恢复回来，此时这一行的 c = 1")]),t._v(" "),s("li",[t._v("而由于 binlog 没写好，所以 binlog 中并没有记录这一条语句（将 c 加 1 的语句）")]),t._v(" "),s("li",[t._v("如果要用到 binlog 来恢复临时库或者主备同步时，那么恢复出来的临时库或者备库中这一行的 c = 0")]),t._v(" "),s("li",[t._v("所以数据会与原库不一致")])])]),t._v(" "),s("li",[s("strong",[t._v("先写 binlog，再写 redolog")]),t._v(" "),s("ol",[s("li",[t._v("binlog 写好后，在写 redolog 的时候 MySQL 异常重启，崩溃后这个事务无效，所以数据恢复回来后，这一行的 c = 0")]),t._v(" "),s("li",[t._v("但是由于 binlog 已经写好了，所以 binlog 中会记录这一条语句")]),t._v(" "),s("li",[t._v("如果要用到 binlog 来恢复临时库或者主备同步时，那么恢复出来的临时库或者备库中这一行的 c = 1")]),t._v(" "),s("li",[t._v("所以数据会与原库不一致")])])])]),t._v(" "),s("h3",{attrs:{id:"两阶段提交的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交的作用"}},[t._v("#")]),t._v(" 两阶段提交的作用")]),t._v(" "),s("p",[t._v("redolog 和 binlog 都可以用于表示事务的提交状态，两阶段提交就是为了让这两个状态保持逻辑上的一致")])])}),[],!1,null,null,null);r.default=o.exports}}]);