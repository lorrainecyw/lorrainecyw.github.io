(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{761:function(e,t,n){"use strict";n.r(t);var v=n(11),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("ol",[n("li",[e._v("锁和受保护资源之间合理的关联关系为 1 : N，只有共享一把锁才能起到互斥的作用")]),e._v(" "),n("li",[e._v("Integer 和 String 类型的对象不适合作为锁来使用，如果锁发生了变化，那么就失去了互斥的功能。Integer、String、Boolean 对象在 JVM 里面是可能被重用的，可重用意味着这个锁可能会被其他代码所占有，如果不释放，那么自己的程序就永远拿不到锁，这是隐藏的风险")]),e._v(" "),n("li",[e._v("锁，应该是私有的、不可变的、不可重用的")]),e._v(" "),n("li",[e._v("需要格外关注竞态条件。两个方法 A 和 B 分开来都是线程安全的，但是组合起来使用却不是线程安全的，需要另外的措施来保证线程安全。遇到 if 条件判断也需要格外注意")]),e._v(" "),n("li",[e._v("方法调用是先计算参数。例如"),n("code",[e._v("set(get() + 1);")]),e._v("这个语句中调用了"),n("code",[e._v("set()")]),e._v("，但是需要先计算"),n("code",[e._v("set()")]),e._v("的参数"),n("code",[e._v("get() + 1")]),e._v("。方法的调用，是先计算参数，将参数压进调用栈之后再执行方法体")]),e._v(" "),n("li",[e._v("在触发"),n("code",[e._v("InterruptedException")]),e._v("异常的同时，JVM 会同时把线程的中断标志位清除")])])])}),[],!1,null,null,null);t.default=_.exports}}]);