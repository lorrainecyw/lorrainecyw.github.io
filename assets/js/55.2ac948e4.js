(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{787:function(t,s,a){"use strict";a.r(s);var n=a(11),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("建立索引是为了提高查询的速度，但是可能会出现这种情况，一条语句本来可以执行得很快，但是却因为 MySQL 选错了索引，执行速度变得很慢，影响了业务响应的速度。本讲主要来复现并解决这个问题")]),t._v(" "),a("h2",{attrs:{id:"mysql-选错索引的情况-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-选错索引的情况-1"}},[t._v("#")]),t._v(" MySQL 选错索引的情况 1")]),t._v(" "),a("p",[t._v("创建一个表，在 a，b 字段上分别创建索引，并且按照 id 递增插入 10 万条数据："),a("code",[t._v("(1, 1, 1), (2, 2, 2) ... (99999, 99999, 99999), (100000, 100000, 100000)")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v("；\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("接下来，执行"),a("code",[t._v("select * from t where a between 10000 and 20000")]),t._v("语句\n按照分析，应该使用索引 a，通过"),a("code",[t._v("explain select * from t where a between 10000 and 20000")]),t._v("来查看具体的执行情况，发现确实使用了索引 a，并且扫描了 10001 行，这样是没有选错索引的\n但是，如果开启两个事务，并执行下面的操作，就会出现选错索引的情况")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Session A")]),t._v(" "),a("th",[t._v("Session B")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("start transaction with consistent snapshot;")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("delete from t;")])]),t._v(" "),a("tr",[a("td",[t._v("call idata();（再次添加之前的那 100000 行数据）")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("explain select * from t where a between 10000 and 20000;")])]),t._v(" "),a("tr",[a("td",[t._v("commit;")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("这里，A 就是开启了一个事务，B 先将表里的数据清空，然后又插入 100000 行数据。这个时候，Session B 执行"),a("code",[t._v("explain select * from t where a between 10000 and 20000;")]),t._v("语句时，就不会使用索引 a 了\n为了验证索引选择是否正确，将原来的语句加上"),a("code",[t._v("force index(a)")]),t._v("，指定语句使用索引 a，然后通过慢查询日志（slow log）来查看跟原来语句的执行情况的区别（"),a("code",[t._v("set long_query_time = 0;")]),t._v("，将慢查询的阈值设置为 0，让这个线程接下来的语句都会被记录到慢查询日志中）")]),t._v(" "),a("ol",[a("li",[t._v("执行"),a("code",[t._v("select * from t where a between 10000 and 20000")]),t._v("的结果：执行时间大约为 40 ms，扫描了 100000 行，显然走了全表扫描")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("select * from t force index(a) where a between 10000 and 20000")]),t._v("的结果：执行时间大约为 21 ms，扫描了 10001 行")])]),t._v(" "),a("p",[t._v("从上面的结果可以看出，MySQL 的优化器确实是选错了索引")]),t._v(" "),a("h2",{attrs:{id:"优化器的逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化器的逻辑"}},[t._v("#")]),t._v(" 优化器的逻辑")]),t._v(" "),a("p",[t._v("优化器选择索引是为了找到一个最优方案，用最小的代价去执行语句。影响执行代价的因素主要有扫描行数、是否使用临时表、是否排序等")]),t._v(" "),a("h4",{attrs:{id:"那么优化器是如何判断扫描行数的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那么优化器是如何判断扫描行数的"}},[t._v("#")]),t._v(" 那么优化器是如何判断扫描行数的 ？")]),t._v(" "),a("p",[t._v("MySQL 在执行语句前，并不能知道要扫描多少行，只能通过统计信息来估算行数。\n这个统计信息就是索引的“区分度”。区分度：一个索引上不同的值越多，区分度就越高，而索引上不同的值的个数成为“基数"),a("code",[t._v("cardinality")]),t._v("”。所以基数越大，区分度越高\n而得到基数的大小，是通过采样统计的方法。InnoDB 从索引的所有数据页中选择 N 个数据页，统计出这些数据页上不同的值的个数，求出平均值，再用平均值乘以索引的总页数，就得到了这个索引的基数\n除了通过基数来判断扫描行数外，回表的代价也要计算进去，上面执行的语句"),a("code",[t._v("select * from t where a between 10000 and 20000")]),t._v("，使用索引 a 的话，每次从索引 a 上拿到一个值，都要回到主键索引上查出整行数据，这些回表的代价也要算进去")]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("既然是没有准确判断出扫描行数，那么针对这种统计信息错误的问题，就要去修正它。使用"),a("code",[t._v("analyze table t")]),t._v("命令来修正，这个命令可以用于重新统计索引信息")])])}),[],!1,null,null,null);s.default=e.exports}}]);